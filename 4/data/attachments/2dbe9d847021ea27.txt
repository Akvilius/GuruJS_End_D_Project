# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Challenge >> PUT /challenger/guid CREATE
- Location: /home/runner/work/GuruJS_End_D_Project/GuruJS_End_D_Project/tests/api.spec.js:313:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 201
Received: 200
    at /home/runner/work/GuruJS_End_D_Project/GuruJS_End_D_Project/tests/api.spec.js:322:36
```

# Test source

```ts
  222 |         const todosService = new TodosService(request);
  223 |         const response = await todosService.getTodos(header);
  224 |         expect (response.status()).toBe(200);
  225 |     });
  226 |
  227 | //26
  228 |     test('GET /todos (200) JSON', {tag: '@Accept'}, async ({request})=>{ 
  229 |         const header = new HeaderBuilder().addToken(token).addAccept(`application/json`).genereteHeader();
  230 |         const todosService = new TodosService(request);
  231 |         const response = await todosService.getTodos(header);
  232 |         expect (response.status()).toBe(200);
  233 |     });
  234 |  //25
  235 |     test('GET /todos (200) ANY', {tag: '@Accept'}, async ({request})=>{ 
  236 |         const header = new HeaderBuilder().addToken(token).addAccept(`*/*`).genereteHeader();
  237 |         const todosService = new TodosService(request);
  238 |         const response = await todosService.getTodos(header);
  239 |         expect (response.status()).toBe(200);
  240 |     });
  241 |
  242 | //28
  243 |     test('GET /todos (200) XML pref', {tag: '@Accept'}, async ({request})=>{ 
  244 |         const header = new HeaderBuilder().addToken(token).addAccept(`application/xml, application/json`).genereteHeader();
  245 |         const todosService = new TodosService(request);
  246 |         const response = await todosService.getTodos(header);
  247 |         expect (response.status()).toBe(200);
  248 |     });
  249 | //29
  250 |      test('GET /todos (200) no accept', {tag: '@Accept'}, async ({request})=>{ 
  251 |         const header = new HeaderBuilder().addToken(token).addAccept(``).genereteHeader();
  252 |         const todosService = new TodosService(request);
  253 |         const response = await todosService.getTodos(header);
  254 |         expect (response.status()).toBe(200);
  255 |     });
  256 | //30
  257 |      test('GET /todos (406)', {tag: '@Accept'}, async ({request})=>{ 
  258 |         const header = new HeaderBuilder().addToken(token).addAccept(`application/gzip`).genereteHeader();
  259 |         const todosService = new TodosService(request);
  260 |         const response = await todosService.getTodos(header);
  261 |         expect (response.status()).toBe(406);
  262 |     });
  263 | //31
  264 |      test('POST /todos XML', {tag: '@ContentType'}, async ({request})=>{ 
  265 |         const header = new HeaderBuilder().addToken(token).addAccept(`application/xml`).addContent('application/xml').genereteHeader();
  266 |         const body = `
  267 |         <todo>
  268 |         <doneStatus>true</doneStatus>
  269 |         <description>test</description>
  270 |         <title>Create</title>
  271 |         </todo>`;
  272 |         const todosService = new TodosService(request);
  273 |         const response = await todosService.postTodos(header,body);
  274 |         expect (response.status()).toBe(201);
  275 |     });
  276 | //32
  277 |     test('POST /todos JSON', {tag: '@ContentType'}, async ({request})=>{ 
  278 |         const header = new HeaderBuilder().addToken(token).addAccept(`application/json`).addContent('application/json').genereteHeader();
  279 |         const todosService = new TodosService(request);
  280 |         const body = new TodosBuilder().addTitle(3).addDoneStatus().addDescription(1).genereteTodos();
  281 |         const response = await todosService.postTodos(header,body);
  282 |         expect (response.status()).toBe(201);
  283 |     });
  284 | //33
  285 |     test('POST /todos (415)', {tag: '@ContentType'}, async ({request})=>{ 
  286 |         const header = new HeaderBuilder().addToken(token).addAccept(`application/json`).addContent('application/gzip').genereteHeader();
  287 |         const todosService = new TodosService(request);
  288 |         const body = new TodosBuilder().addTitle(3).addDoneStatus().addDescription(1).genereteTodos();
  289 |         const response = await todosService.postTodos(header,body);
  290 |         expect (response.status()).toBe(415);
  291 |     });
  292 | //34
  293 |     test('GET /challenger/guid (existing X-CHALLENGER)', {tag: '@Restore'}, async ({request})=>{ 
  294 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
  295 |         const challengerService = new ChallengerService(request);
  296 |         const response = await challengerService.getChallengerGuid(header,token);
  297 |         expect (response.status()).toBe(200);
  298 |         const data = await response.json();
  299 |         expect(data).toHaveProperty("challengeStatus");
  300 |         expect(data.xChallenger).toEqual(token);
  301 |     });
  302 |
  303 | //35
  304 |     test('PUT /challenger/guid RESTORE', {tag: '@Restore'}, async ({request})=>{ 
  305 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
  306 |         const challengerService = new ChallengerService(request);
  307 |         const responseGet = await challengerService.getChallengerGuid(header,token);
  308 |         const data = await responseGet.json();
  309 |         const response = await challengerService.putChallengerGuid(header,data,token);
  310 |         expect (response.status()).toBe(200);
  311 |     });
  312 | //36
  313 |     test('PUT /challenger/guid CREATE', {tag: '@Restore'}, async ({request})=>{ 
  314 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
  315 |         const headerOld = new HeaderBuilder().addToken(token).genereteHeader();
  316 |         const challengerService = new ChallengerService(request);
  317 |         const responseGet = await challengerService.getChallengerGuid(header,token);
  318 |         const data = await responseGet.json();
  319 |         data['xChallenger'] = oldGuid;
  320 |         delete data.xAuthToken;
  321 |         const response = await challengerService.putChallengerGuid(headerOld,data,oldGuid);
> 322 |         expect (response.status()).toBe(201);// 200 если существует, повторный прогон
      |                                    ^ Error: expect(received).toBe(expected) // Object.is equality
  323 |     });
  324 | //37
  325 |     test('GET /challenger/database/guid (200)', {tag: '@Restore'}, async ({request})=>{ 
  326 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
  327 |         const challengerService = new ChallengerService(request);
  328 |         const response = await challengerService.getDatabaseGuid(header,token);
  329 |         expect (response.status()).toBe(200);
  330 |     });
  331 | //38
  332 |     test('PUT /challenger/database/guid (Update)', {tag: '@Restore'}, async ({request})=>{ 
  333 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
  334 |         const challengerService = new ChallengerService(request);
  335 |         const responseGet = await challengerService.getDatabaseGuid(header,token);
  336 |         const data = await responseGet.json();
  337 |         const response = await challengerService.putDatabaseGuid(header,data,token);
  338 |         expect (response.status()).toBe(204);
  339 |     });
  340 |
  341 | //39
  342 |     test('POST /todos XML to JSON', {tag: '@MixAccept'}, async ({request})=>{ 
  343 |     const header = new HeaderBuilder().addToken(token).addAccept(`application/json`).addContent('application/xml').genereteHeader();
  344 |     const body = `
  345 |         <todo>
  346 |         <doneStatus>true</doneStatus>
  347 |         <description>test 006</description>
  348 |         <title>Create or not</title>
  349 |         </todo>`;
  350 |         const todosService = new TodosService(request);
  351 |         const response = await todosService.postTodos(header,body);
  352 |         expect (response.status()).toBe(201);
  353 |     });
  354 | //40
  355 |     test('POST /todos JSON to XML', {tag: '@MixAccept'}, async ({request})=>{ 
  356 |         const header = new HeaderBuilder().addToken(token).addAccept(`application/xml`).addContent('application/json').genereteHeader();
  357 |         const todosService = new TodosService(request);
  358 |         const body = new TodosBuilder().addTitle(2).addDoneStatus().addDescription().genereteTodos();
  359 |         const response = await todosService.postTodos(header,body);
  360 |         expect (response.status()).toBe(201);
  361 |     });
  362 | //41
  363 |     test('DELETE /heartbeat (405)', {tag: '@StatusCode'}, async ({request})=>{ 
  364 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
  365 |         const heartbeatService = new HeartbeatService(request);
  366 |         const response = await heartbeatService.deleteHeartbeat(header);
  367 |         expect (response.status()).toBe(405);
  368 |     });
  369 | //42
  370 |     test('PATCH /heartbeat (500)', {tag: '@StatusCode'}, async ({request})=>{ 
  371 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
  372 |         const heartbeatService = new HeartbeatService(request);
  373 |         const response = await heartbeatService.patchHeartbeat(header);
  374 |         expect (response.status()).toBe(500);
  375 |     });
  376 | //43
  377 |     test('TRACE /heartbeat (501)', {tag: '@StatusCode'}, async ({request})=>{ 
  378 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
  379 |         const heartbeatService = new HeartbeatService(request);
  380 |         const response = await heartbeatService.traceHeartbeat(header);
  381 |         expect (response.status()).toBe(501);
  382 |     });
  383 | //44
  384 |     test('GET /heartbeat (204)', {tag: '@StatusCode'}, async ({request})=>{ 
  385 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
  386 |         const heartbeatService = new HeartbeatService(request);
  387 |         const response = await heartbeatService.getHeartbeat(header);
  388 |         expect (response.status()).toBe(204);
  389 |     });
  390 | //45
  391 |     test('POST /heartbeat as DELETE (405)', {tag: '@HTTP'}, async ({request})=>{ 
  392 |         const header = new HeaderBuilder().addToken(token).addHttpMethod('DELETE').genereteHeader();
  393 |         const heartbeatService = new HeartbeatService(request);
  394 |         const response = await heartbeatService.postHeartbeat(header);
  395 |         expect (response.status()).toBe(405);
  396 |     });
  397 | //46
  398 |     test('POST /heartbeat as PATCH (500)', {tag: '@HTTP'}, async ({request})=>{ 
  399 |         const header = new HeaderBuilder().addToken(token).addHttpMethod('PATCH').genereteHeader();
  400 |         const heartbeatService = new HeartbeatService(request);
  401 |         const response = await heartbeatService.postHeartbeat(header);
  402 |         expect (response.status()).toBe(500);
  403 |     });
  404 | //47
  405 |     test('POST /heartbeat as Trace (501)', {tag: '@HTTP'}, async ({request})=>{ 
  406 |
  407 |         const header = new HeaderBuilder().addToken(token).addHttpMethod('TRACE').genereteHeader();
  408 |         const heartbeatService = new HeartbeatService(request);
  409 |         const response = await heartbeatService.postHeartbeat(header);
  410 |         expect (response.status()).toBe(501);
  411 |     });
  412 | //48
  413 |     test('POST /secret/token (401)', {tag: '@Authentication'}, async ({request})=>{ 
  414 |         const header = new HeaderBuilder().addToken(token).addAuth("Basic " + Buffer.from("Admin1:Pa55word").toString("base64")).genereteHeader();
  415 |         const secretService = new SecretService(request);
  416 |         const response = await secretService.postSecret(header);
  417 |         expect (response.status()).toBe(401);
  418 |     });
  419 | //49
  420 |     test('POST /secret/token (201)', {tag: '@Authentication'}, async ({request})=>{ 
  421 |         const header = new HeaderBuilder().addToken(token).addAuth("Basic " + Buffer.from("admin:password").toString("base64")).genereteHeader();
  422 |         const secretService = new SecretService(request);
```

# Local changes

```diff
diff --git a/package.json b/package.json
index 2202275..bc97f86 100644
--- a/package.json
+++ b/package.json
@@ -3,7 +3,7 @@
   "version": "1.0.0",
   "main": "index.js",
   "scripts": {
-    "test": "npx playwright test api.spec.js",
+    "test": "npx playwright test",
     "ui": "npx playwright test --ui",
     "test:report": "npx playwright show-report",
     "test:update-snapshots": "npx playwright test --update-snapshots",
```