# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Challenge >> GET /challenges (200)
- Location: /home/runner/work/GuruJS_End_D_Project/GuruJS_End_D_Project/tests/api.spec.js:22:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 201
Received: 404
    at /home/runner/work/GuruJS_End_D_Project/GuruJS_End_D_Project/tests/api.spec.js:16:36
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { ChallengerService, ChallengesService, TodosService, HeartbeatService, SecretService }  from '../src/service/index';
   3 | import { TodosBuilder, HeaderBuilder } from '../src/helpers/api/index';
   4 | require('dotenv').config();
   5 |
   6 | let token;
   7 | const oldGuid = '62a63304-d598-4430-9cf5-2e52948d7421';
   8 |
   9 | test.describe ('Challenge', ()=>{
   10 |
   11 |  //1   
   12 |     test.beforeAll(async ({request}) => {
   13 |
   14 |         const challengerService = new ChallengerService(request);
   15 |         const response = await challengerService.post();
>  16 |         expect (response.status()).toBe(201);
      |                                    ^ Error: expect(received).toBe(expected) // Object.is equality
   17 |         const headers = await response.headers();
   18 |         token = headers['x-challenger'];
   19 |         console.log('Это токен: '+token);
   20 |     });
   21 | //2
   22 |     test('GET /challenges (200)', {tag: '@FirstReal'}, async ({request})=>{ 
   23 |         const challengesService = new ChallengesService(request);
   24 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
   25 |         const response = await challengesService.get(header);
   26 |         const body = await response.json();
   27 |         expect (response.status()).toBe(200);
   28 |         expect (body.challenges.length).toBe(59);
   29 |     });
   30 | //3
   31 |     test('GET /todos (200)', {tag: '@GET'}, async ({request})=>{ 
   32 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
   33 |         const todosService = new TodosService(request);
   34 |         const response = await todosService.getTodos(header);
   35 |         expect (response.status()).toBe(200);
   36 |     });
   37 | //4
   38 |     test('GET /todo (404) not plural', {tag: '@GET'}, async ({request})=>{ 
   39 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
   40 |         const todoService = new TodosService(request);
   41 |         const response = await todoService.getTodo(header);
   42 |         expect (response.status()).toBe(404);
   43 |         expect(response.statusText()).toBe('Not Found');
   44 |     });
   45 | //5
   46 |     test('GET /todos/{id} (200)', {tag: '@GET'}, async ({request})=>{ 
   47 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
   48 |         const todoidService = new TodosService(request);
   49 |         const response = await todoidService.getTodosId(header,1);
   50 |         expect (response.status()).toBe(200);
   51 |     });
   52 | //6
   53 |     test('GET /todos/{id} (404)', {tag: '@GET'}, async ({request})=>{ 
   54 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
   55 |         const todoidService = new TodosService(request);
   56 |         const response = await todoidService.getTodosId(header,99);
   57 |         expect (response.status()).toBe(404);
   58 |         expect(response.statusText()).toBe('Not Found');
   59 |     });
   60 | //7
   61 |     test('GET /todos (200) ?filter', {tag: '@GET'}, async ({request})=>{ 
   62 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
   63 |         const postTodosService = new TodosService(request);
   64 |         const body = new TodosBuilder().addTitle().addDoneStatus().addDescription().genereteTodos();
   65 |         await postTodosService.postTodos(header,body);
   66 |         const todosService = new TodosService(request);
   67 |         const response = await todosService.getTodos(header,'?doneStatus=true');
   68 |         expect (response.status()).toBe(200);
   69 |         const bodyData = await response.json();
   70 |         expect(bodyData.todos.every((todo) => todo.doneStatus === true)).toBeTruthy();
   71 |     });
   72 | //8
   73 |     test('	HEAD /todos (200)', {tag: '@HEAD'}, async({ request }) => {
   74 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
   75 |         const todosService = new TodosService(request);
   76 |         const response = await todosService.headTodos(header);
   77 |         expect (response.status()).toBe(200);
   78 |     });
   79 |  //9   
   80 |     test('POST /todos/ (201)',{tag: '@POST'}, async({ request }) => {
   81 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
   82 |         const postTodosService = new TodosService(request);
   83 |         const body = new TodosBuilder().addTitle().addDoneStatus().addDescription().genereteTodos();
   84 |         const response = await postTodosService.postTodos(header,body);
   85 |         expect (response.status()).toBe(201);
   86 |         expect((await response.json()).title).toContain(body.title);
   87 |
   88 |     });
   89 | //10
   90 |     test('POST /todos/ (400) doneStatus',{tag: '@POST'}, async({ request }) => {
   91 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
   92 |         const body = new TodosBuilder().addTitle(2).addDoneStatus(10).addDescription(1).genereteTodos();
   93 |         const postTodosService = new TodosService(request);
   94 |         const response = await postTodosService.postTodos(header,body);
   95 |         expect (response.status()).toBe(400);
   96 |         expect(response.statusText()).toBe('Bad Request');
   97 |         expect((await response.json()).errorMessages).toContainEqual(expect.stringContaining("doneStatus"));
   98 |     });
   99 | //11
  100 |     test('POST /todos (400) title too long',{tag: '@POST'}, async({ request }) => {
  101 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
  102 |         const body = new TodosBuilder().addTitle(100).addDoneStatus().addDescription(50).genereteTodos();
  103 |         const postTodosService = new TodosService(request);
  104 |         const response = await postTodosService.postTodos(header,body);
  105 |         expect (response.status()).toBe(400);
  106 |
  107 |     });
  108 | //12
  109 |     test('POST /todos (400) description too long',{tag: '@POST'}, async({ request }) => {
  110 |         const header = new HeaderBuilder().addToken(token).genereteHeader();
  111 |         const body = new TodosBuilder().addTitle(20).addDoneStatus().addDescription(201).genereteTodos();
  112 |         const postTodosService = new TodosService(request);
  113 |         const response = await postTodosService.postTodos(header,body);
  114 |         expect (response.status()).toBe(400);
  115 |     });
  116 | //13
```

# Local changes

```diff
diff --git a/.gitignore b/.gitignore
index f5f67a1..8b886a7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,6 +5,7 @@ node_modules/
 /playwright-report/
 /blob-report/
 /playwright/.cache/
+.env
 
 
 #allure
diff --git a/package-lock.json b/package-lock.json
index c23e2fb..a10a63b 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -11,7 +11,8 @@
       "dependencies": {
         "@faker-js/faker": "^9.7.0",
         "allure": "^3.0.0-beta.11",
-        "allure-playwright": "^3.2.1"
+        "allure-playwright": "^3.2.1",
+        "dotenv": "^16.5.0"
       },
       "devDependencies": {
         "@playwright/test": "^1.51.1",
@@ -1350,6 +1351,18 @@
         "robust-predicates": "^3.0.2"
       }
     },
+    "node_modules/dotenv": {
+      "version": "16.5.0",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.5.0.tgz",
+      "integrity": "sha512-m/C+AwOAr9/W1UOIZUo232ejMNnJAJtYQjUbHoNTBNTJSvqzzDh7vnrei3o3r3m9blf6ZoDkvcw0VmozNRFJxg==",
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://dotenvx.com"
+      }
+    },
     "node_modules/dunder-proto": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
diff --git a/package.json b/package.json
index 5407ca8..9e78f2b 100644
--- a/package.json
+++ b/package.json
@@ -6,7 +6,7 @@
     "test": "npx playwright test",
     "realWordsTest": "npx playwright test realWords.spec.js",
     "academyBugsTest": "npx playwright test academybugs.spec.js",
-    "apiTest": "npx playwright test",
+    "apiTest": "npx playwright test api.spec.js",
     "ui": "npx playwright test --ui",
     "allure": "npx allure awesome ./allure-results",
     "allure:open": "allure open ./allure-report",
@@ -23,6 +23,7 @@
   "dependencies": {
     "@faker-js/faker": "^9.7.0",
     "allure": "^3.0.0-beta.11",
-    "allure-playwright": "^3.2.1"
+    "allure-playwright": "^3.2.1",
+    "dotenv": "^16.5.0"
   }
 }
diff --git a/playwright.config.js b/playwright.config.js
index ac7ca59..118018f 100644
--- a/playwright.config.js
+++ b/playwright.config.js
@@ -1,5 +1,8 @@
 import { defineConfig, devices } from "@playwright/test";
 import * as os from "node:os";
+require('dotenv').config();
+
+const URL_UI = 'https://realworld.qa.guru/';
 //import { URLs } from "./src/types";
 
 /**
@@ -8,7 +11,7 @@ import * as os from "node:os";
  */
 // import dotenv from 'dotenv';
 // import path from 'path';
-// dotenv.config({ path: path.resolve(__dirname, '.env') });
+ //dotenv.config({ path: path.resolve(__dirname, '.env') });
 
 /**
  * @see https://playwright.dev/docs/test-configuration
@@ -23,7 +26,7 @@ export default defineConfig({
   retries: process.env.CI ? 2 : 0,
   /* Opt out of parallel tests on CI. */
   //workers: process.env.CI ? 1 : undefined,
-  workers:2,
+  workers:1,
   /* Reporter to use. See https://playwright.dev/docs/test-reporters */
   //timeout: 60000,
   reporter: [
@@ -46,6 +49,7 @@ export default defineConfig({
     /* Base URL to use in actions like `await page.goto('/')`. */
     // baseURL: 'http://127.0.0.1:3000',
     baseURL: 'https://academybugs.com/',
+    
     /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
     trace: "on-first-retry",
     screenshot: "only-on-failure",
@@ -56,7 +60,7 @@ export default defineConfig({
   projects: [
     {
       name: 'chromium',
-      use: { ...devices['Desktop Chrome'] }
+      use: { ...devices['Desktop Chrome'] , URL_UI }
     }
 
   ],
diff --git a/readme.md b/readme.md
index 1d631ac..2f1c0eb 100644
--- a/readme.md
+++ b/readme.md
@@ -5,9 +5,9 @@
 - [Стек](#Стек)
 - [Тест-кейсы](#Тест-кейсы)
 - [Запуск тестов и генерация отчетов](#Запуск-тестов-и-генерация-отчетов)
-- [Запуск пайплайна автотестов в Jenkins](#-Запуск-пайплайна-автотестов-в-Jenkins)
+- [Запуск пайплайна автотестов в Jenkins](#Запуск-пайплайна-автотестов-в-Jenkins)
 - [Пример Allure-отчета](#-Пример-Allure-отчета)
-- [Пример интеграции с ТестОпс](#-Пример-интеграции-с-ТестОпс)
+- [Пример интеграции с ТестОпс](#--пример-интеграции-с-тестопс)
 - [Уведомления в Telegram чат с ботом](#-уведомления-в-telegram-чат-с-ботом)
 
 ---
diff --git a/src/pages/findBags/findBags.page.js b/src/pages/findBags/findBags.page.js
index a488a00..20e1e38 100644
--- a/src/pages/findBags/findBags.page.js
+++ b/src/pages/findBags/findBags.page.js
@@ -3,41 +3,20 @@ export class FindBagsPage  {
     constructor(page) {
     this.page = page;
     
-    this.imageClick = page.locator(`(//a[@class='ec_image_link_cover'])[4]`);
+ 
     this.amountThingsOnPageLink  = page.getByRole('link', { name: '50' })
-    this.addToCartButton  = page.locator('#ec_add_to_cart_4');
-    this.checkOutButton   =   page.getByRole('link', { name: 'CHECKOUT NOW' });
     this.productCart = page.locator('#ec_product_image_effect_4481370').getByRole('link');
-    this.mistakeMessage = page.getByRole('heading', { name: 'You found a crash bug,' });
-    
-  }
-  async checkImage() {
-    await this.imageClick.click();
+    this.mistakeMessage = page.getByRole('heading', { name: 'You found a crash bug,' }).first();
     
   }
-
+ 
   async getThingsOnPage() {
     await this.amountThingsOnPageLink.click();
     
-  }
-  async addToCart() {
-    await this.addToCartButton.click();
-    
-  }
-
-  async gotoCart (){
-    await this.checkOutButton.click();
-
   }
 
   async goToProduct () {
     await this.productCart.click();
   }
 
-  async errorMassage () {
-    await this.mistakeMessage.waitFor({ state: 'visible' });;
-  }
-
-
-
 }
diff --git a/src/service/chalenger.service.js b/src/service/chalenger.service.js
index 9443cbe..6a1233e 100644
--- a/src/service/chalenger.service.js
+++ b/src/service/chalenger.service.js
@@ -1,4 +1,4 @@
-const URL = 'https://apichallenges.herokuapp.com/';
+const URL = `${process.env.API_URL}challenger`
 
 export class ChallengerService {
     constructor (request)
@@ -7,19 +7,19 @@ export class ChallengerService {
     }
 
     async post () {
-        const response = await this.request.post(`${URL}challenger`);
+        const response = await this.request.post(URL);
         return response;
     }
 
     async getChallengerGuid(header, guid) {
-        const response = await this.request.get(`${URL}challenger/${guid}`,{
+        const response = await this.request.get(`${URL}/${guid}`,{
             headers: header,
         });
         return response;
     }
 
     async putChallengerGuid(header, body, guid) {
-        const response = await this.request.put(`${URL}challenger/${guid}`,{
+        const response = await this.request.put(`${URL}//${guid}`,{
             headers: header,
             data: body
         });
@@ -27,14 +27,14 @@ export class ChallengerService {
     }
 
     async getDatabaseGuid(header, guid) {
-        const response = await this.request.get(`${URL}challenger/database/${guid}`,{
+        const response = await this.request.get(`${URL}/database/${guid}`,{
             headers: header,
         });
         return response;
     }
 
     async putDatabaseGuid(header, body, guid) {
-        const response = await this.request.put(`${URL}challenger/database/${guid}`,{
+        const response = await this.request.put(`${URL}/database/${guid}`,{
             headers: header,
             data: body
         });
diff --git a/src/service/challenges.service.js b/src/service/challenges.service.js
index f6e12c1..c9eacee 100644
--- a/src/service/challenges.service.js
+++ b/src/service/challenges.service.js
@@ -1,4 +1,4 @@
-const URL = 'https://apichallenges.herokuapp.com/';
+const URL = `${process.env.API_URL}challenges`
 
 export class ChallengesService {
     constructor (request)
@@ -7,7 +7,7 @@ export class ChallengesService {
     }
 
     async get(token) {
-        const response = await this.request.get(`${URL}challenges`,{
+        const response = await this.request.get(URL,{
             headers: token
         });
         return response;
diff --git a/src/service/heartbeat.service.js b/src/service/heartbeat.service.js
index 4d9f14c..694f713 100644
--- a/src/service/heartbeat.service.js
+++ b/src/service/heartbeat.service.js
@@ -1,4 +1,4 @@
-const URL = 'https://apichallenges.herokuapp.com/';
+const URL = `${process.env.API_URL}heartbeat`;
 
 export class HeartbeatService {
     constructor (request)
@@ -7,21 +7,21 @@ export class HeartbeatService {
     }
 
     async deleteHeartbeat(token) {
-        const response = await this.request.delete(`${URL}heartbeat`,{
+        const response = await this.request.delete(URL,{
             headers: token,
         });
         return response;
     }
 
     async patchHeartbeat(token) {
-        const response = await this.request.patch(`${URL}heartbeat`,{
+        const response = await this.request.patch(URL,{
             headers: token,
         });
         return response;
     }
 
     async traceHeartbeat(token) {
-        const response = await this.request.fetch(`${URL}heartbeat`,{ 
+        const response = await this.request.fetch(URL,{ 
             method: 'TRACE',
             headers: token,
         });
@@ -29,14 +29,14 @@ export class HeartbeatService {
     }
 
     async getHeartbeat(token) {
-        const response = await this.request.get(`${URL}heartbeat`,{
+        const response = await this.request.get(URL,{
             headers: token,
         });
         return response;
     }
 
     async postHeartbeat(token) {
-        const response = await this.request.post(`${URL}heartbeat`,{ 
+        const response = await this.request.post(URL,{ 
             headers: token,
         });
         return response;
diff --git a/src/service/secret.service.js b/src/service/secret.service.js
index 03c7718..9dbaa70 100644
--- a/src/service/secret.service.js
+++ b/src/service/secret.service.js
@@ -1,4 +1,4 @@
-const URL = 'https://apichallenges.herokuapp.com/';
+const URL = `${process.env.API_URL}secret`;
 
 export class SecretService {
     constructor (request)
@@ -7,21 +7,21 @@ export class SecretService {
     }
 
     async postSecret(token) {
-        const response = await this.request.post(`${URL}secret/token`,{ 
+        const response = await this.request.post(`${URL}/token`,{ 
             headers: token,
         });
         return response;
     }
 
     async getSecretNote(token) {
-        const response = await this.request.get(`${URL}secret/note`,{ 
+        const response = await this.request.get(`${URL}/note`,{ 
             headers: token,
         });
         return response;
     }
 
     async postSecretNote(token,body) {
-        const response = await this.request.post(`${URL}secret/note`,{ 
+        const response = await this.request.post(`${URL}/note`,{ 
             headers: token,
             data: body
         });
diff --git a/src/service/todos.service.js b/src/service/todos.service.js
index e3e684e..c592aa8 100644
--- a/src/service/todos.service.js
+++ b/src/service/todos.service.js
@@ -1,6 +1,5 @@
-import { TodosBuilder } from "../helpers/api/todos.builder";
 
-const URL = 'https://apichallenges.herokuapp.com/';
+const API_URL = process.env.API_URL;
 
 export class TodosService {
     constructor (request)
@@ -8,36 +7,40 @@ export class TodosService {
         this.request = request;
     }
 
-    async getTodos(token) {
-        const response = await this.request.get(`${URL}todos`,{
+    async getTodos(token, filter=null) {
+        if (filter == null)
+        {
+        const response = await this.request.get(`${API_URL}todos`,{
             headers: token,
         });
         return response;
+        }
+        else
+        {
+            const response = await this.request.get(`${API_URL}todos${filter}`,{
+                headers: token,
+            });
+            return response;
+        }
+        //return response;
     }
 
     async getTodo(token) {
-        const response = await this.request.get(`${URL}todo`,{
+        const response = await this.request.get(`${API_URL}todo`,{
             headers: token,
         });
         return response;
     }
 
     async getTodosId(token, id) {
-        const response = await this.request.get(`${URL}todos/${id}`,{
-            headers: token,
-        });
-        return response;
-    }
-
-    async getTodosFilter(token) {
-        const response = await this.request.get(`${URL}todos?doneStatus=true`,{
+        const response = await this.request.get(`${API_URL}todos/${id}`,{
             headers: token,
         });
         return response;
     }
 
     async postTodos(token, body) {
-        const response = await this.request.post(`${URL}todos`,{
+        const response = await this.request.post(`${API_URL}todos`,{
             headers:token,
             data: body
         });
@@ -45,14 +48,14 @@ export class TodosService {
     }
 
     async headTodos(token) {
-        const response = await this.request.head(`${URL}todos`,{
+        const response = await this.request.head(`${API_URL}todos`,{
             headers:token
         });
         return response;
     }
 
     async putTodos(token, body, id) {
-        const response = await this.request.put(`${URL}todos/${id}`,{
+        const response = await this.request.put(`${API_URL}todos/${id}`,{
             headers: token,
             data: body
         });
@@ -60,7 +63,7 @@ export class TodosService {
     }
 
     async postTodosId(token, body, id) {
-        const response = await this.request.post(`${URL}todos/${id}`,{
+        const response = await this.request.post(`${API_URL}todos/${id}`,{
             headers:token,
             data: body
         });
@@ -68,7 +71,7 @@ export class TodosService {
     }
 
     async deleteTodos(token, id) {
-        const response = await this.request.delete(`${URL}todos/${id}`,{
+        const response = await this.request.delete(`${API_URL}todos/${id}`,{
             headers:token
         });
         return response;
diff --git a/tests/academybugs.spec.js b/tests/academybugs.spec.js
index 458b843..f3ea3c9 100644
--- a/tests/academybugs.spec.js
+++ b/tests/academybugs.spec.js
@@ -3,8 +3,8 @@ import {App} from '../src/pages/findBags/app.page.js'
 
 let  app;
 
+test.describe ('Список товаров', ()=>{
 test('@Bug Изменить количество отображаемых товаров на странице', async({ page }) => {
-
     app = new App(page);
     await app.mainPage.open();
     await app.findBagsPage.getThingsOnPage();
@@ -13,23 +13,27 @@ test('@Bug Изменить количество отображаемых тов
         await expect(app.findBagsPage.mistakeMessage).toBeVisible();
     });
 });
+})
+test.describe ('Карточка товара', ()=>{
+
+    test.beforeEach(async({page})=>{ 
+        app = new App(page);
+        await app.mainPage.open();
+        await app.findBagsPage.goToProduct();
+    });
+
+test('@Bug Изменить отображение цен товаров в евро', async({  }) => {
 
-test('@Bug Изменить отображение цен товаров в евро', async({ page }) => {
-    app = new App(page);
-    await app.mainPage.open();
-    await app.findBagsPage.goToProduct();
     await app.productPage.changeCurrencyEur();
  
     await test.step('Появляется сообщение об ошибке', async() => {
-        await expect(app.findBagsPage.mistakeMessage.nth(1)).toBeVisible();
+        await expect(app.findBagsPage.mistakeMessage).toBeVisible();
 
     });
 });
 
-test('@Bug Перейти на детальную страницу товара в категории "hot item"', async({ page }) => {
-    app = new App(page);
-    await app.mainPage.open();
-    await app.findBagsPage.goToProduct();
+test('@Bug Перейти на детальную страницу товара в категории "hot item"', async({  }) => {
+
     await app.productPage.goToHotItem();
     
     await test.step('Появляется поп-ап для выбора типа и описания бага', async() => {
@@ -37,10 +41,8 @@ test('@Bug Перейти на детальную страницу товара
     });
 });
 
-test('@Bug Перейти на страницу производителя товара', async({ page }) => {
-    app = new App(page);
-    await app.mainPage.open();
-    await app.findBagsPage.goToProduct();
+test('@Bug Перейти на страницу производителя товара', async({  }) => {
+
     await app.productPage.goToManufacturer();
    
     await test.step('Появляется поп-ап для выбора типа и описания бага', async() => {
@@ -49,13 +51,12 @@ test('@Bug Перейти на страницу производителя то
     
 });
 
-test('@Bug Отфильтровать товары по ценовому диапазону "$15.00 - $19.99"', async({ page }) => {
-    app = new App(page);
-    await app.mainPage.open();
-    await app.findBagsPage.goToProduct();
+test('@Bug Отфильтровать товары по ценовому диапазону "$15.00 - $19.99"', async({  }) => {
+
     await app.productPage.filterPriceRange();
  
     await test.step('Появляется поп-ап для выбора типа и описания бага', async() => {
         await expect(app.popUp).toContainText('What did you find out?');
     });
 });
+})
diff --git a/tests/api.spec.js b/tests/api.spec.js
index ef015d3..f43316f 100644
--- a/tests/api.spec.js
+++ b/tests/api.spec.js
@@ -1,8 +1,7 @@
-
-// Подключение тестов
 import { test, expect } from '@playwright/test';
 import { ChallengerService, ChallengesService, TodosService, HeartbeatService, SecretService }  from '../src/service/index';
 import { TodosBuilder, HeaderBuilder } from '../src/helpers/api/index';
+require('dotenv').config();
 
 let token;
 const oldGuid = '62a63304-d598-4430-9cf5-2e52948d7421';
@@ -64,8 +63,8 @@ test.describe ('Challenge', ()=>{
         const postTodosService = new TodosService(request);
         const body = new TodosBuilder().addTitle().addDoneStatus().addDescription().genereteTodos();
         await postTodosService.postTodos(header,body);
-        const TodosFilterService = new TodosService(request);
-        const response = await TodosFilterService.getTodosFilter(header);
+        const todosService = new TodosService(request);
+        const response = await todosService.getTodos(header,'?doneStatus=true');
         expect (response.status()).toBe(200);
         const bodyData = await response.json();
         expect(bodyData.todos.every((todo) => todo.doneStatus === true)).toBeTruthy();
diff --git a/tests/realWords.spec.js b/tests/realWords.spec.js
index bc3910a..d981431 100644
--- a/tests/realWords.spec.js
+++ b/tests/realWords.spec.js
@@ -1,18 +1,14 @@
-
-// Подключение тестов
 import { test, expect } from '@playwright/test';
-
 import { UserBuilder, ArticleBuilder, CommentBuilder} from '../src/helpers/realWorld/builder/index';
-//import { MainPage, RegPage, YoufeedPage, EditorPage, ArticlePage, SettingPage, LoginPage } from '../src/pages/realWorld/index';
-import {App} from '../src/pages/realWorld/app.page'
+import {App} from '../src/pages/realWorld/app.page';
+require('dotenv').config();
 
 
 let app;
-const URL_UI = 'https://realworld.qa.guru/';
-
-test.describe ('Урок 5', ()=>{
+const URL_UI = process.env.URL_UI;
+test.describe ('Тесты для realworld', ()=>{
 
-    test.beforeEach(async({page})=>{ //Создание пользователя
+    test.beforeEach(async({page})=>{
         
         app = new App(page);
         const userBuilder = new UserBuilder()
```